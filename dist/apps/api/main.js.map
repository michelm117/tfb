{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tfb/./apps/api/src/app/app.controller.ts","webpack://tfb/./apps/api/src/app/app.module.ts","webpack://tfb/./apps/api/src/app/app.service.ts","webpack://tfb/./apps/api/src/environments/environment.prod.ts","webpack://tfb/./libs/api-interfaces/src/index.ts","webpack://tfb/./libs/api-interfaces/src/lib/about.interfaces.ts","webpack://tfb/./libs/api-interfaces/src/lib/age-category.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/api.interfaces.ts","webpack://tfb/./libs/api-interfaces/src/lib/country.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/dialog.interfaces.ts","webpack://tfb/./libs/api-interfaces/src/lib/event.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/race.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/request-with-user.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/result.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/rider.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/story.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/token-payload.interface.ts","webpack://tfb/./libs/api-interfaces/src/lib/user-exposed.interface.ts","webpack://tfb/./libs/api/core/src/index.ts","webpack://tfb/./libs/api/core/src/lib/about/about.controller.ts","webpack://tfb/./libs/api/core/src/lib/about/about.module.ts","webpack://tfb/./libs/api/core/src/lib/about/about.service.ts","webpack://tfb/./libs/api/core/src/lib/about/dto/create-about.dto.ts","webpack://tfb/./libs/api/core/src/lib/about/dto/update-about.dto.ts","webpack://tfb/./libs/api/core/src/lib/about/entities/about.entity.ts","webpack://tfb/./libs/api/core/src/lib/age-category/age-category.controller.ts","webpack://tfb/./libs/api/core/src/lib/age-category/age-category.module.ts","webpack://tfb/./libs/api/core/src/lib/age-category/age-category.service.ts","webpack://tfb/./libs/api/core/src/lib/age-category/dto/create-age-category.dto.ts","webpack://tfb/./libs/api/core/src/lib/age-category/dto/update-age-category.dto.ts","webpack://tfb/./libs/api/core/src/lib/age-category/entities/age-category.entity.ts","webpack://tfb/./libs/api/core/src/lib/auth/auth.controller.ts","webpack://tfb/./libs/api/core/src/lib/auth/auth.module.ts","webpack://tfb/./libs/api/core/src/lib/auth/auth.service.ts","webpack://tfb/./libs/api/core/src/lib/auth/dto/register.dto.ts","webpack://tfb/./libs/api/core/src/lib/auth/guards/jwt-auth.guard.ts","webpack://tfb/./libs/api/core/src/lib/auth/guards/jwt-refresh.guard.ts","webpack://tfb/./libs/api/core/src/lib/auth/guards/local-auth.guard.ts","webpack://tfb/./libs/api/core/src/lib/auth/strategies/jwt-refresh-token.strategy.ts","webpack://tfb/./libs/api/core/src/lib/auth/strategies/jwt.strategy.ts","webpack://tfb/./libs/api/core/src/lib/auth/strategies/local.strategy.ts","webpack://tfb/./libs/api/core/src/lib/country/country.controller.ts","webpack://tfb/./libs/api/core/src/lib/country/country.module.ts","webpack://tfb/./libs/api/core/src/lib/country/country.service.ts","webpack://tfb/./libs/api/core/src/lib/country/dto/create-country.dto.ts","webpack://tfb/./libs/api/core/src/lib/country/dto/update-country.dto.ts","webpack://tfb/./libs/api/core/src/lib/country/entities/country.entity.ts","webpack://tfb/./libs/api/core/src/lib/races/dto/create-race.dto.ts","webpack://tfb/./libs/api/core/src/lib/races/dto/delete-result.dto.ts","webpack://tfb/./libs/api/core/src/lib/races/dto/update-race.dto.ts","webpack://tfb/./libs/api/core/src/lib/races/entities/race.entity.ts","webpack://tfb/./libs/api/core/src/lib/races/races.controller.ts","webpack://tfb/./libs/api/core/src/lib/races/races.module.ts","webpack://tfb/./libs/api/core/src/lib/races/races.service.ts","webpack://tfb/./libs/api/core/src/lib/result/dto/create-result.dto.ts","webpack://tfb/./libs/api/core/src/lib/result/dto/update-result.dto.ts","webpack://tfb/./libs/api/core/src/lib/result/entities/result.entity.ts","webpack://tfb/./libs/api/core/src/lib/result/result.controller.ts","webpack://tfb/./libs/api/core/src/lib/result/result.module.ts","webpack://tfb/./libs/api/core/src/lib/result/result.service.ts","webpack://tfb/./libs/api/core/src/lib/riders/dto/create-rider.dto.ts","webpack://tfb/./libs/api/core/src/lib/riders/dto/update-rider.dto.ts","webpack://tfb/./libs/api/core/src/lib/riders/entities/rider.entity.ts","webpack://tfb/./libs/api/core/src/lib/riders/riders.controller.ts","webpack://tfb/./libs/api/core/src/lib/riders/riders.module.ts","webpack://tfb/./libs/api/core/src/lib/riders/riders.service.ts","webpack://tfb/./libs/api/core/src/lib/stories/dto/create-story.dto.ts","webpack://tfb/./libs/api/core/src/lib/stories/dto/update-story.dto.ts","webpack://tfb/./libs/api/core/src/lib/stories/entities/story.entity.ts","webpack://tfb/./libs/api/core/src/lib/stories/stories.controller.ts","webpack://tfb/./libs/api/core/src/lib/stories/stories.module.ts","webpack://tfb/./libs/api/core/src/lib/stories/stories.service.ts","webpack://tfb/./libs/api/core/src/lib/user/entities/user.entity.ts","webpack://tfb/./libs/api/core/src/lib/user/user.controller.ts","webpack://tfb/./libs/api/core/src/lib/user/user.module.ts","webpack://tfb/./libs/api/core/src/lib/user/user.service.ts","webpack://tfb/external commonjs \"@nestjs/common\"","webpack://tfb/external commonjs \"@nestjs/config\"","webpack://tfb/external commonjs \"@nestjs/core\"","webpack://tfb/external commonjs \"@nestjs/jwt\"","webpack://tfb/external commonjs \"@nestjs/mapped-types\"","webpack://tfb/external commonjs \"@nestjs/passport\"","webpack://tfb/external commonjs \"@nestjs/platform-express\"","webpack://tfb/external commonjs \"@nestjs/typeorm\"","webpack://tfb/external commonjs \"bcrypt\"","webpack://tfb/external commonjs \"class-transformer\"","webpack://tfb/external commonjs \"class-validator\"","webpack://tfb/external commonjs \"cookie-parser\"","webpack://tfb/external commonjs \"express\"","webpack://tfb/external commonjs \"multer\"","webpack://tfb/external commonjs \"passport-jwt\"","webpack://tfb/external commonjs \"passport-local\"","webpack://tfb/external commonjs \"tslib\"","webpack://tfb/external commonjs \"typeorm\"","webpack://tfb/external commonjs \"uuid\"","webpack://tfb/external node-commonjs \"fs\"","webpack://tfb/external node-commonjs \"path\"","webpack://tfb/webpack/bootstrap","webpack://tfb/./apps/api/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { Message } from '@tfb/api-interfaces';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('hello')\n  getData(): Message {\n    return this.appService.getData();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\nimport {\n  Country,\n  CountryModule,\n  Rider,\n  About,\n  RidersModule,\n  AboutModule,\n  StoriesModule,\n  Story,\n  Result,\n  AgeCategory,\n  Race,\n  AgeCategoryModule,\n  ResultModule,\n  RacesModule,\n  User,\n  UserModule,\n  AuthModule,\n} from '@tfb/api/core';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: '.env',\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          Rider,\n          Country,\n          About,\n          Story,\n          Result,\n          AgeCategory,\n          Race,\n          User,\n        ],\n        synchronize: true,\n        logging: true,\n      }),\n    }),\n    // TypeOrmModule.forRoot({\n    //   type: 'postgres',\n    //   host: 'abul.db.elephantsql.com',\n    //   port: 5432,\n    //   username: 'encsnhea',\n    //   password: 'DjjOGRRegOkNJsH6fql1sOxOQqlveYpw',\n    //   database: 'encsnhea',\n    //   entities: [Rider, Country, About, Story, Result, AgeCategory, Race, User],\n    //   synchronize: true,\n    //   logging: false,\n    // }),\n\n    RidersModule,\n    CountryModule,\n    AboutModule,\n    StoriesModule,\n    RacesModule,\n    AgeCategoryModule,\n    ResultModule,\n    UserModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Message } from '@tfb/api-interfaces';\n\n@Injectable()\nexport class AppService {\n  getData(): Message {\n    return { message: 'Welcome to api!' };\n  }\n}\n","export const environment = {\n  production: true,\n};\n","export * from './lib/about.interfaces';\nexport * from './lib/age-category.interface';\nexport * from './lib/api.interfaces';\nexport * from './lib/country.interface';\nexport * from './lib/dialog.interfaces';\nexport * from './lib/event.interface';\nexport * from './lib/race.interface';\nexport * from './lib/result.interface';\nexport * from './lib/rider.interface';\nexport * from './lib/story.interface';\nexport * from './lib/token-payload.interface';\nexport * from './lib/request-with-user.interface';\nexport * from './lib/user-exposed.interface';\n","export interface AboutInterface {\n  id: number;\n  text: string;\n}\n","export interface AgeCategoryInterface {\n  id: number;\n  name: string;\n}\n","export interface Message {\n  message: string;\n}\n","export interface CountryInterface {\n  id: number;\n  name: string;\n  iso: string;\n}\n","export interface DialogData {\n  titel: string;\n  text: string;\n}\n\nexport interface DialogImgData {\n  titel: string;\n  text: string;\n  imgPath: string;\n}\n","import { CountryInterface } from './country.interface';\n\nexport interface EventInterface {\n  id: number;\n  show: boolean;\n  title: string;\n  place: string;\n  country: CountryInterface;\n  date: Date;\n  text: string;\n  imgNames: string[];\n  podium: boolean;\n}\n","import { EventInterface } from './event.interface';\nimport { ResultInterface } from './result.interface';\n\nexport interface RaceInterface extends EventInterface {\n  id: number;\n  results: ResultInterface[];\n}\n","import { Request } from 'express';\nimport { UserInterface } from './user-exposed.interface';\n\n/**\n * Extend the Request with the user class.\n */\nexport interface RequestWithUser extends Request {\n  /**\n   * User that is saved in the request.\n   * @type {User}\n   */\n  user: UserInterface;\n}\n","import { AgeCategoryInterface } from './age-category.interface';\nimport { RiderInterface } from './rider.interface';\n\nexport interface ResultInterface {\n  id: number;\n  rider: RiderInterface;\n  result: number;\n  ageCategory: AgeCategoryInterface;\n  acResult: number;\n}\n","import { CountryInterface } from './country.interface';\n\nexport interface RiderInterface {\n  id: number;\n  name: string;\n  surname: string;\n  country: CountryInterface;\n  imgName: string;\n}\n","import { EventInterface } from './event.interface';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface StoryInterface extends EventInterface {\n  podium: boolean;\n}\n","/**\n * Define the Payload.\n */\nexport interface TokenPayload {\n  /**\n   * User id\n   * @type {number}\n   */\n  userId: number;\n}\n","export interface UserInterface {\n  /**\n   * User id.\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * User email address.\n   * @type {string}\n   */\n  email: string;\n\n  /**\n   * name.\n   * @type {string}\n   */\n  name: string;\n\n  /**\n   * Hashed user password.\n   * @type {string}\n   */\n  password: string;\n\n  /**\n   * Describes if account is active or not.\n   * @type {boolean}\n   */\n  isActive: boolean;\n}\n\nexport interface UserExposedInterface {\n  /**\n   * User email address.\n   * @type {string}\n   */\n  email: string;\n\n  /**\n   * Name.\n   * @type {string}\n   */\n  name: string;\n}\n","export * from './lib/riders/riders.module';\nexport * from './lib/riders/entities/rider.entity';\n\nexport * from './lib/country/country.module';\nexport * from './lib/country/entities/country.entity';\n\nexport * from './lib/about/about.module';\nexport * from './lib/about/entities/about.entity';\n\nexport * from './lib/stories/stories.module';\nexport * from './lib/stories/entities/story.entity';\n\nexport * from './lib/age-category/age-category.module';\nexport * from './lib/age-category/entities/age-category.entity';\n\nexport * from './lib/races/races.module';\nexport * from './lib/races/entities/race.entity';\n\nexport * from './lib/result/result.module';\nexport * from './lib/result/entities/result.entity';\n\nexport * from './lib/user/user.module';\nexport * from './lib/user/entities/user.entity';\n\nexport * from './lib/auth/auth.module';\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { AboutService } from './about.service';\nimport { CreateAboutDto } from './dto/create-about.dto';\nimport { UpdateAboutDto } from './dto/update-about.dto';\n\n@Controller('abouttext')\nexport class AboutController {\n  constructor(private readonly aboutService: AboutService) {}\n\n  @Post()\n  create(@Body() createAboutDto: CreateAboutDto) {\n    return this.aboutService.create(createAboutDto);\n  }\n\n  @Get()\n  find() {\n    return this.aboutService.find();\n  }\n\n  @Get('count')\n  count() {\n    return this.aboutService.count();\n  }\n\n  @Patch()\n  update(@Body() updateAboutDto: UpdateAboutDto) {\n    return this.aboutService.update(updateAboutDto);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { AboutService } from './about.service';\nimport { AboutController } from './about.controller';\nimport { About } from './entities/about.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([About])],\n  controllers: [AboutController],\n  providers: [AboutService],\n})\nexport class AboutModule {}\n","import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAboutDto } from './dto/create-about.dto';\nimport { UpdateAboutDto } from './dto/update-about.dto';\nimport { About } from './entities/about.entity';\n\n@Injectable()\nexport class AboutService {\n  constructor(\n    @InjectRepository(About)\n    private aboutRepository: Repository<About>\n  ) {}\n\n  async create(createAboutDto: CreateAboutDto) {\n    if ((await this.count()) !== 0) {\n      return new BadRequestException('About text already exists');\n    }\n\n    const aboutText = this.aboutRepository.create(createAboutDto);\n    return await this.aboutRepository.save(aboutText);\n  }\n\n  async count() {\n    return await this.aboutRepository.count();\n  }\n\n  async find() {\n    return await this.aboutRepository.find();\n  }\n\n  async update(updateAboutDto: UpdateAboutDto) {\n    const count = await this.count();\n    if (count === 0) {\n      return new BadRequestException(\n        \"About text cant be updated. Text doesn't exists yet\"\n      );\n    }\n\n    const abouts = await this.find();\n\n    return await this.aboutRepository.update(abouts[0].id, updateAboutDto);\n  }\n}\n","export class CreateAboutDto {\n  text: string;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAboutDto } from './create-about.dto';\n\nexport class UpdateAboutDto extends PartialType(CreateAboutDto) {}\n","import { AboutInterface } from '@tfb/api-interfaces';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class About implements AboutInterface {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  text: string;\n}\n","import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { AgeCategoryService } from './age-category.service';\nimport { CreateAgeCategoryDto } from './dto/create-age-category.dto';\nimport { UpdateAgeCategoryDto } from './dto/update-age-category.dto';\n\n@Controller('age-category')\nexport class AgeCategoryController {\n  constructor(private readonly ageCategoryService: AgeCategoryService) {}\n\n  @Post()\n  create(@Body() createAgeCategoryDto: CreateAgeCategoryDto) {\n    return this.ageCategoryService.create(createAgeCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.ageCategoryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.ageCategoryService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateAgeCategoryDto: UpdateAgeCategoryDto) {\n    return this.ageCategoryService.update(+id, updateAgeCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.ageCategoryService.remove(+id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { AgeCategoryService } from './age-category.service';\nimport { AgeCategoryController } from './age-category.controller';\nimport { AgeCategory } from './entities/age-category.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([AgeCategory])],\n  controllers: [AgeCategoryController],\n  providers: [AgeCategoryService],\n})\nexport class AgeCategoryModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAgeCategoryDto } from './dto/create-age-category.dto';\nimport { UpdateAgeCategoryDto } from './dto/update-age-category.dto';\nimport { AgeCategory } from './entities/age-category.entity';\n\n@Injectable()\nexport class AgeCategoryService {\n  constructor(\n    @InjectRepository(AgeCategory)\n    private ageCategoryRepository: Repository<AgeCategory>\n  ) {}\n\n  async create(createAgeCategoryDto: CreateAgeCategoryDto) {\n    const ageCategory = this.ageCategoryRepository.create(createAgeCategoryDto);\n    await this.ageCategoryRepository.save(ageCategory);\n    return ageCategory;\n  }\n\n  findAll() {\n    return this.ageCategoryRepository.find();\n  }\n\n  findOne(id: number) {\n    return this.ageCategoryRepository.findOne({ where: { id } });\n  }\n\n  async update(id: number, updateAgeCategoryDto: UpdateAgeCategoryDto) {\n    const ageCategory = await this.ageCategoryRepository.findOneBy({ id });\n    if (!ageCategory) {\n      return;\n    }\n\n    return await this.ageCategoryRepository.update(id, updateAgeCategoryDto);\n  }\n\n  async remove(id: number) {\n    return await this.ageCategoryRepository.delete(id);\n  }\n}\n","export class CreateAgeCategoryDto {\n  name: string;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAgeCategoryDto } from './create-age-category.dto';\n\nexport class UpdateAgeCategoryDto extends PartialType(CreateAgeCategoryDto) {}\n","import { AgeCategoryInterface } from '@tfb/api-interfaces';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Result } from '../../result/entities/result.entity';\n\n@Entity()\nexport class AgeCategory implements AgeCategoryInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(() => Result, (result) => result.ageCategory)\n  results: Result[];\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Req,\n  UseGuards,\n  HttpCode,\n  SerializeOptions,\n} from '@nestjs/common';\nimport { RequestWithUser } from '@tfb/api-interfaces';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport JwtRefreshGuard from './guards/jwt-refresh.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n/**\n * AuthController is responsible for handling incoming authentication requests\n * and returning responses to the client. Only exposed properties will be send.\n * See [Expose properties]{@link https://docs.nestjs.com/techniques/serialization#expose-properties}\n */\n@Controller('auth')\n@SerializeOptions({\n  strategy: 'excludeAll',\n})\nexport class AuthController {\n  /**\n   * Inject authService and userService providers.\n   * @param authService\n   * @param userService\n   */\n  constructor(\n    private authService: AuthService,\n    private userService: UserService\n  ) {}\n\n  /**\n   * Returns the user\n   * @description only there for testing. Will be replaced in the future.\n   * @param {RequestWithUser} req\n   * @returns {UserInterface}\n   */\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  getUserInformation(@Req() req: RequestWithUser): User {\n    const user = req.user;\n    return user;\n  }\n\n  /**\n   * Register route\n   * @param {RegisterDto} registrationData\n   * @returns {Promise<UserInterface>}\n   */\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto): Promise<User> {\n    return this.authService.register(registrationData);\n  }\n\n  /**\n   * Login route.\n   *\n   * Set cookie containing access and refresh tokens and save the refresh\n   * token in the db.\n   *\n   * Return Http Code 200. Default Http Code on Post is 201.\n   * @param {RequestWithUser} req\n   * @returns {Promise<UserInterface>}\n   */\n  @HttpCode(200)\n  @Post('login')\n  @UseGuards(LocalAuthGuard)\n  async login(@Req() req: RequestWithUser): Promise<User> {\n    const { user } = req;\n    const accessTokenCookie = this.authService.getCookieWithJwtAccessToken(\n      user.id\n    );\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.userService.setCurrentRefreshToken(refreshToken, user.id);\n\n    req.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n    return user;\n  }\n\n  /**\n   * Logout route.\n   *\n   * Remove the refresh token in the database and remove tokens from cookie.\n   * @param {RequestWithUser} req\n   */\n  @HttpCode(200)\n  @Post('logout')\n  @UseGuards(JwtAuthGuard)\n  async logout(@Req() req: RequestWithUser) {\n    await this.userService.removeRefreshToken(req.user.id);\n    req.res.setHeader('Set-Cookie', this.authService.getCookiesForLogout());\n  }\n\n  /**\n   * Refresh route.\n   *\n   * Set new access token in Cookie if refresh token is valid.\n   * @param {RequestWithUser} req\n   * @returns {UserInterface}\n   */\n  @Get('refresh')\n  @UseGuards(JwtRefreshGuard)\n  refresh(@Req() req: RequestWithUser): any {\n    const accessTokenCookie = this.authService.getCookieWithJwtAccessToken(\n      req.user.id\n    );\n\n    req.res.setHeader('Set-Cookie', accessTokenCookie);\n    return req.user;\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserModule } from '../user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtRefreshTokenStrategy } from './strategies/jwt-refresh-token.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [UserModule, PassportModule, ConfigModule, JwtModule.register({})],\n  providers: [AuthService, LocalStrategy, JwtStrategy, JwtRefreshTokenStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../user/user.service';\nimport { CreateAuthDto } from './dto/create-auth.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { UpdateAuthDto } from './dto/update-auth.dto';\nimport * as bcrypt from 'bcrypt';\nimport { User } from '../user/entities/user.entity';\nimport { TokenPayload } from '@tfb/api-interfaces';\n\n/**\n * AuthService is responsible for registering and authenticating users, creating\n * cookies and verifying passwords.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Inject needed providers.\n   * @param {UserService} usersService\n   * @param {JwtService} jwtService\n   * @param {ConfigService} configService\n   */\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n    private readonly configService: ConfigService\n  ) {}\n\n  /**\n   * Register a user.\n   * - Hashed password is stored in the database.\n   * - Email must not exists in the database.\n   * @param {RegisterDto} registrationData defines needed properties.\n   * @returns {Promise<UserInterface>}\n   */\n  public async register(registrationData: RegisterDto): Promise<User> {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n\n      return createdUser;\n    } catch (error) {\n      if (error?.code === '23505') {\n        // Postgres error code for unique key violation.\n        throw new HttpException(\n          'A user with this email already exists. Use a different email.',\n          HttpStatus.BAD_REQUEST\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  /**\n   * Validate credentials and returns authenticated user.\n   * @param {string} email user email address.\n   * @param {string} plainPassword plain user password.\n   * @throws {HttpException} Error should not be too explicit to prevent attackers from creating list of registered emails.\n   * @returns {Promise<UserInterface>} the authenticated user.\n   */\n  async getAuthenticatedUser(\n    email: string,\n    plainPassword: string\n  ): Promise<User> {\n    const user = await this.usersService.getByEmail(email);\n    if (!user) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    await this.verifyPassword(plainPassword, user.password);\n    return user;\n  }\n\n  /**\n   * Verify given passwords.\n   * @param {string} plainPassword plain password.\n   * @param {string} hashedPassword hashed password.\n   * @throws {HttpException} Password must match.\n   */\n  private async verifyPassword(plainPassword: string, hashedPassword: string) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainPassword,\n      hashedPassword\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n  }\n\n  /**\n   * Creates Cookie with jwt access token.\n   * ToDo: Fidel with Domain, HttpOnly and Path properties.\n   * @param {number} userId\n   * @returns {string} cookie with access token.\n   */\n  public getCookieWithJwtAccessToken(userId: number): string {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_ACCESS_TOKEN_EXPIRATION_TIME'\n      )}s`,\n    });\n    const maxAge = this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME');\n\n    const cookie = `Authentication=${token}; Path=/; Max-Age=${maxAge}`;\n    return cookie;\n  }\n\n  /**\n   * Creates Cookie with jwt refresh token.\n   * ToDo: Fidel with Domain, HttpOnly and Path properties.\n   * @param {number} userId\n   * @returns {string} cookie with refresh token.\n   */\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_REFRESH_TOKEN_EXPIRATION_TIME'\n      )}s`,\n    });\n    const maxAge = this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME');\n    const cookie = `Refresh=${token}; Path=/; Max-Age=${maxAge}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  /**\n   * Creates Cookie with empty jwt access and refresh token. This cookie should\n   * overwrite the old cookie.\n   *\n   * ! To overwrite the old cookie the domain and path properties must be the\n   * ! same ass the original cookie.\n   * @returns {string} cookie with empty access and refresh token.\n   */\n  public getCookiesForLogout() {\n    return [\n      'Authentication=; Path=/; Max-Age=0',\n      'Refresh=; Path=/; Max-Age=0',\n    ];\n  }\n}\n","import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\n/**\n * RegisterDto defines which properties are needed to register a new user.\n */\nexport class RegisterDto {\n  /**\n   * User email - needs to be a valid email address.\n   * @type {string}\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * User password - needs to be a string with a min length of 8.\n   * @type {string}\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  /**\n   * Name - needs to be a string that is not empty.\n   * @type {string}\n   */\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * JwtAuthGuard checks if access token is valid by using the jwt strategy.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * JwtRefreshGuard checks if refresh token is valid by using the\n * jwt-refresh-token strategy.\n */\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * LocalAuthGuard checks if credentials are correct by using the local strategy.\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n","import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from '../../user/user.service';\nimport { TokenPayload } from '@tfb/api-interfaces';\nimport { AuthService } from '../auth.service';\n\n/**\n * JwtRefreshTokenStrategy is used to verify if the request has an valid refresh token.\n * PassportStrategy first verifies the JWT's signature. The validate() method is\n * only called if the token is valid (not expired and signed with our secret).\n */\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token'\n) {\n  /**\n   * The constructor extracts the refresh token from the cookie and injects the\n   * needed providers.\n   * @param {ConfigService} configService\n   * @param {UserService} userService\n   * @param {AuthService} authService\n   */\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    configService: ConfigService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * Verify if the refresh token belongs to the user.\n   *\n   * Because of option passReqToCallback inside the constructor we have access\n   * on the request.\n   * @param req\n   * @param payload\n   * @returns\n   */\n  async validate(req: Request, payload: TokenPayload) {\n    const refreshToken = req.cookies?.Refresh;\n\n    const user = await this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId\n    );\n\n    if (!user) {\n      req.res.setHeader('Set-Cookie', this.authService.getCookiesForLogout());\n    }\n    return user;\n  }\n}\n","import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from '../../user/user.service';\nimport { TokenPayload } from '@tfb/api-interfaces';\nimport { User } from '../../user/entities/user.entity';\n\n/**\n * JwtStrategy is used to verify if the request has an valid access token.\n * PassportStrategy first verifies the JWT's signature. The validate() method is\n * only called if the token is valid (not expired and signed with our secret).\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor extracts the access token from the cookie and injects the\n   * needed providers.\n   * @param {ConfigService} configService\n   * @param {UserService} userService\n   */\n  constructor(configService: ConfigService, private userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          const access_token = request?.cookies?.Authentication;\n          return access_token;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      ignoreExpiration: false,\n      /**\n       * Enables the request as a parameter in  validate(). If true validate()\n       * should look like this: validate(request: Request, payload: TokenPayload)\n       */\n      passReqToCallback: false,\n    });\n  }\n\n  /**\n   * We simply return the authenticated user. Because only we can sign the\n   * access token, we have the guarantee that the information in payload are\n   * correct and have not been modified. This is true as long as the secret has\n   * not been leaked.\n   *\n   * It's also worth pointing out that this approach leaves us room ('hooks' as\n   * it were) to inject other business logic into the process. For example, we\n   * could do a database lookup in our validate() method to extract more\n   * information about the user, resulting in a more enriched user object being\n   * available in our Request. This is also the place we may decide to do\n   * further token validation, such as looking up the userId in a list of\n   * revoked tokens, enabling us to perform token revocation. The model we've\n   * implemented here in our sample code is a fast, \"stateless JWT\" model, where\n   * each API call is immediately authorized based on the presence of a valid\n   * JWT, and a small bit of information about the requester (its userId and\n   * username) is available in our Request pipeline.\n   *\n   * ToDo: Uncomment `isActive` when user can activate account following\n   * link in registration email\n   *\n   * @param {TokenPayload} payload\n   * @returns Promise<User>\n   */\n  async validate(payload: TokenPayload): Promise<User> {\n    const user = await this.userService.getById(payload.userId);\n    // if (!user.isActive) {\n    //   throw new UnauthorizedException('User is not active');\n    // }\n    return user;\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from '../../user/entities/user.entity';\n\n/**\n * LocalStrategy is used to log user in. It validates the credentials and\n * returns the authenticated user.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Define the username field in the constructor.\n   * @param authService\n   */\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  /**\n   * Validate the credentials.\n   * @param {string} username\n   * @param {string} password\n   * @returns  Promise<User>\n   */\n  async validate(username: string, password: string): Promise<User> {\n    const user = await this.authService.getAuthenticatedUser(\n      username,\n      password\n    );\n    // if (!user.isActive) {\n    //   throw new UnauthorizedException('User is not active');\n    // }\n    return user;\n  }\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { CountryService } from './country.service';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\n\n@Controller('country')\nexport class CountryController {\n  constructor(private readonly countryService: CountryService) {}\n\n  @Post()\n  create(@Body() createCountryDto: CreateCountryDto) {\n    return this.countryService.create(createCountryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.countryService.findAll();\n  }\n\n  @Get(':iso')\n  findOneByIso(@Param('iso') iso: string) {\n    return this.countryService.findOneByIso(iso);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.countryService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateCountryDto: UpdateCountryDto) {\n    return this.countryService.update(+id, updateCountryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.countryService.remove(+id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { CountryService } from './country.service';\nimport { CountryController } from './country.controller';\nimport { Country } from './entities/country.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Country])],\n  controllers: [CountryController],\n  providers: [CountryService],\n})\nexport class CountryModule {}\n","import { Injectable } from '@nestjs/common';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { Country } from './entities/country.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class CountryService {\n  constructor(\n    @InjectRepository(Country)\n    private countryRepository: Repository<Country>\n  ) {}\n\n  async create(createCountryDto: CreateCountryDto) {\n    const country = this.countryRepository.create(createCountryDto);\n    await this.countryRepository.save(country);\n    return country;\n  }\n\n  findAll() {\n    return this.countryRepository.find();\n  }\n\n  findOneByIso(iso: string) {\n    return this.countryRepository.find({ where: { iso } });\n  }\n\n  findOne(id: number) {\n    return this.countryRepository.findOneBy({ id });\n  }\n\n  async update(id: number, updateCountryDto: UpdateCountryDto) {\n    const country = await this.countryRepository.findOneBy({ id });\n    if (!country) {\n      return;\n    }\n\n    return await this.countryRepository.update(id, updateCountryDto);\n  }\n\n  async remove(id: number) {\n    return await this.countryRepository.delete(id);\n  }\n}\n","export class CreateCountryDto {\n  name: string;\n  iso: string;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCountryDto } from './create-country.dto';\n\nexport class UpdateCountryDto extends PartialType(CreateCountryDto) {}\n","import { CountryInterface } from '@tfb/api-interfaces';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Rider } from '../../riders/entities/rider.entity';\nimport { Story } from '../../stories/entities/story.entity';\n\n@Entity()\nexport class Country implements CountryInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  iso: string;\n\n  @OneToMany(() => Rider, (rider) => rider.country)\n  riders: Rider[];\n\n  @OneToMany(() => Story, (story) => story.country)\n  stories: Story[];\n}\n","import { CreateResultDto } from '../../result/dto/create-result.dto';\n\nexport class CreateRaceDto {\n  title: string;\n  place: string;\n  countryId: number;\n  results: CreateResultDto[];\n  date: Date;\n  text: string;\n  imgNames: string[];\n  show: boolean;\n}\n","export class DeleteResultDto {\n  resultId: number;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRaceDto } from './create-race.dto';\n\nexport class UpdateRaceDto extends PartialType(CreateRaceDto) {}\n","import { RaceInterface } from '@tfb/api-interfaces';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Country } from '../../country/entities/country.entity';\nimport { Result } from '../../result/entities/result.entity';\n\n@Entity()\nexport class Race implements RaceInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToMany(() => Result, (result) => result.race)\n  results: Result[];\n\n  @Column()\n  title: string;\n\n  @Column()\n  place: string;\n\n  @ManyToOne(() => Country, (country) => country.stories)\n  country: Country;\n\n  @Column({ type: 'date' })\n  date: Date;\n\n  @Column()\n  text: string;\n\n  @Column('simple-array', {\n    nullable: true,\n  })\n  imgNames: string[];\n\n  @Column({ default: false })\n  podium: boolean;\n\n  @Column({ default: false })\n  show: boolean;\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Res,\n} from '@nestjs/common';\nimport { RacesService } from './races.service';\nimport { CreateRaceDto } from './dto/create-race.dto';\nimport { UpdateRaceDto } from './dto/update-race.dto';\n\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Express, Response } from 'express';\nimport { diskStorage } from 'multer';\nimport { v4 as uuidv4 } from 'uuid';\nimport path = require('path');\nimport { join } from 'path';\nimport { CreateResultDto } from '../result/dto/create-result.dto';\nimport { DeleteResultDto } from './dto/delete-result.dto';\n\nexport const storage = {\n  storage: diskStorage({\n    destination: './upload/races',\n    filename: (req, file, cb) => {\n      const filename =\n        path.parse(file.originalname).name.replace(/\\s/g, '') + uuidv4();\n      const extension = path.parse(file.originalname).ext;\n\n      cb(null, `${filename}${extension}`);\n    },\n  }),\n};\n\n@Controller('myrace')\nexport class RacesController {\n  constructor(private readonly racesService: RacesService) {}\n  @Post()\n  create(@Body() createRaceDto: CreateRaceDto) {\n    return this.racesService.create(createRaceDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.racesService.findAllChecked();\n  }\n\n  @Get('all')\n  findAllShow() {\n    return this.racesService.findAll();\n  }\n\n  @Get('map')\n  async getMap() {\n    return await this.racesService.getMap();\n  }\n\n  @Get('years')\n  async getYears() {\n    return await this.racesService.getYears();\n  }\n\n  @Get('calendar')\n  async getCalendar() {\n    return await this.racesService.getCalendar();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.racesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateRaceDto: UpdateRaceDto) {\n    return this.racesService.update(+id, updateRaceDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.racesService.remove(+id);\n  }\n\n  @Post('upload/:id')\n  @UseInterceptors(FileInterceptor('file', storage))\n  async uploadProfilePicture(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File\n  ) {\n    await this.racesService.addPicture(+id, file.filename);\n    return { imagePath: file.filename };\n  }\n\n  @Get('image/:fileName')\n  async findProfileImage(\n    @Param('fileName') fileName: string,\n    @Res() res: Response\n  ) {\n    return res.sendFile(join(process.cwd(), 'upload/races/' + fileName));\n  }\n\n  @Patch('add-result/:id')\n  async addResult(\n    @Param('id') id: string,\n    @Body() createResultDto: CreateResultDto\n  ) {\n    return await this.racesService.addResult(+id, createResultDto);\n  }\n\n  @Patch('delete-result/:id')\n  async deleteResult(\n    @Param('id') id: string,\n    @Body() deleteResultDto: DeleteResultDto\n  ) {\n    return await this.racesService.deleteResult(+id, deleteResultDto.resultId);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { RacesService } from './races.service';\nimport { RacesController } from './races.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Race } from './entities/race.entity';\nimport { Country } from '../country/entities/country.entity';\nimport { CountryService } from '../country/country.service';\nimport { Result } from '../result/entities/result.entity';\nimport { AgeCategory } from '../age-category/entities/age-category.entity';\nimport { RidersService } from '../riders/riders.service';\nimport { Rider } from '../riders/entities/rider.entity';\nimport { ResultService } from '../result/result.service';\nimport { AgeCategoryService } from '../age-category/age-category.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Race, Country, Result, AgeCategory, Rider]),\n  ],\n  controllers: [RacesController],\n  providers: [\n    RacesService,\n    CountryService,\n    RidersService,\n    ResultService,\n    AgeCategoryService,\n  ],\n})\nexport class RacesModule {}\n","import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { RaceInterface, ResultInterface } from '@tfb/api-interfaces';\nimport { Repository } from 'typeorm';\nimport { CountryService } from '../country/country.service';\nimport { Result } from '../result/entities/result.entity';\nimport { ResultService } from '../result/result.service';\nimport { CreateRaceDto } from './dto/create-race.dto';\nimport { UpdateRaceDto } from './dto/update-race.dto';\nimport { Race } from './entities/race.entity';\nimport * as fs from 'fs';\nimport { CreateResultDto } from '../result/dto/create-result.dto';\nimport { DeleteResultDto } from './dto/delete-result.dto';\n\n@Injectable()\nexport class RacesService {\n  constructor(\n    @InjectRepository(Race)\n    private raceRepository: Repository<Race>,\n    private countryService: CountryService,\n    @Inject(forwardRef(() => ResultService))\n    private resultService: ResultService\n  ) {}\n\n  async create(createRaceDto: CreateRaceDto) {\n    const race = this.raceRepository.create(createRaceDto);\n    if (!race.imgNames) {\n      race.imgNames = [];\n    }\n\n    const country = await this.countryService.findOne(createRaceDto.countryId);\n\n    if (!country) {\n      return new NotFoundException(\n        `Country with id ${createRaceDto.countryId} was not found.}`\n      );\n    }\n    race.country = country;\n    race.podium = false;\n\n    const results: Result[] = [];\n    if (createRaceDto.results) {\n      for (let i = 0; i < createRaceDto.results.length; i++) {\n        const resultDto = createRaceDto.results[i];\n        try {\n          const result = await this.resultService.create(resultDto);\n          if (result.acResult < 4 || result.result < 4) {\n            race.podium = true;\n          }\n          results.push(result);\n        } catch (err: any) {\n          throw new BadRequestException(err);\n        }\n      }\n    }\n    race.results = results;\n\n    return await this.raceRepository.save(race);\n  }\n\n  async findAll() {\n    return await this.raceRepository.find({\n      relations: ['country', 'results', 'results.rider', 'results.ageCategory'],\n    });\n  }\n\n  async findAllChecked() {\n    return await this.raceRepository.find({\n      where: { show: true },\n      relations: ['country', 'results', 'results.rider', 'results.ageCategory'],\n    });\n  }\n\n  async findOne(id: number) {\n    const race = await this.raceRepository.findOne({\n      where: { id },\n      relations: ['country', 'results', 'results.rider', 'results.ageCategory'],\n    });\n    if (!race) {\n      throw new NotFoundException('Race was not found');\n    }\n    return race;\n  }\n\n  async update(id: number, updateRaceDto: UpdateRaceDto) {\n    const race = await this.raceRepository.findOneBy({ id });\n    if (!race) {\n      return;\n    }\n\n    if (updateRaceDto.countryId) {\n      const countryEntity = await this.countryService.findOne(\n        updateRaceDto.countryId\n      );\n      if (!countryEntity) {\n        throw new BadRequestException('Country nof found');\n      }\n      race.country = countryEntity;\n    }\n\n    // Remove deleted images\n    if (updateRaceDto.imgNames) {\n      const diff = race.imgNames.filter((item) => {\n        if (updateRaceDto.imgNames) {\n          return updateRaceDto.imgNames.indexOf(item) < 0;\n        }\n      });\n      this.deletePictures(diff);\n    }\n\n    const newRace = { ...race, ...updateRaceDto };\n    await this.raceRepository.update(id, newRace);\n    return newRace;\n  }\n\n  remove(id: number) {\n    return this.raceRepository.delete(id);\n  }\n\n  async getMap() {\n    const races = await this.findAllChecked();\n\n    const map: Record<number, RaceInterface[]> = {};\n    for (const race of races) {\n      const year = new Date(race.date).getFullYear();\n      if (!map[year]) {\n        map[year] = [];\n      }\n      map[year].push(race);\n    }\n    return map;\n  }\n\n  async getMapAll() {\n    const races = await this.findAll();\n\n    const map: Record<number, RaceInterface[]> = {};\n    for (const race of races) {\n      const year = new Date(race.date).getFullYear();\n      if (!map[year]) {\n        map[year] = [];\n      }\n      map[year].push(race);\n    }\n    return map;\n  }\n\n  async getYears() {\n    const map = await this.getMap();\n    return Object.keys(map);\n  }\n\n  async addPicture(id: number, filename: string) {\n    const story = await this.raceRepository.findOneBy({ id });\n    if (!story) {\n      return;\n    }\n\n    // Adding new image to array\n    let images = story.imgNames;\n    if (!images) {\n      images = [];\n    }\n    images.push(filename);\n    return await this.raceRepository.update(id, { imgNames: images });\n  }\n\n  async deletePictures(filenames: string[]) {\n    filenames.forEach((filename) => {\n      this.deletePicture(filename);\n    });\n  }\n\n  async deletePicture(filename: string) {\n    const path = './upload/races';\n    fs.unlink(`${path}/${filename}`, (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  async addResult(raceId: number, createResultDto: CreateResultDto) {\n    if (!raceId || !createResultDto) {\n      return;\n    }\n\n    try {\n      const race = await this.raceRepository.findOne({\n        where: { id: raceId },\n        relations: ['results', 'results.rider', 'results.ageCategory'],\n      });\n      if (!race) {\n        return new NotFoundException('Race was not found');\n      }\n\n      const results: Result[] = race.results;\n\n      const result = await this.resultService.create(createResultDto);\n      if (!result) {\n        return new NotFoundException('Could not create result entity');\n      }\n      results.push(result);\n\n      let podium = race.podium;\n      if (result.acResult < 4 || result.result < 4) {\n        podium = true;\n      }\n\n      return await this.raceRepository.update(raceId, {\n        podium: podium,\n        // results: results,\n      });\n    } catch (err: any) {\n      console.error(err);\n      throw new BadRequestException(err);\n    }\n  }\n\n  async deleteResult(id: number, resultId: number) {\n    if (!id || !resultId) {\n      return;\n    }\n\n    try {\n      await this.resultService.remove(resultId);\n\n      // Check if  podium is still true\n      const race = await this.raceRepository.findOne({\n        where: { id },\n        relations: ['results'],\n      });\n      if (!race) {\n        return new NotFoundException('Race was not found');\n      }\n\n      let podium = false;\n      for (let i = 0; i < race.results.length; i++) {\n        const result = race.results[i];\n        if (result.acResult < 4 || result.result < 4) {\n          podium = true;\n        }\n      }\n\n      return await this.raceRepository.update(id, { podium: podium });\n    } catch (err: any) {\n      console.error(err);\n      throw new BadRequestException('Something went wrong');\n    }\n  }\n\n  async getCalendar() {\n    const records: Record<\n      number,\n      Record<number, Record<number, string[][]>>\n    > = {};\n    const map = await this.getMapAll();\n    const years = Object.keys(map);\n\n    for (let i = 0; i < years.length; i++) {\n      const year = years[i];\n      const races: RaceInterface[] = map[year];\n      const monthDateRecord: Record<number, Record<number, string[][]>> = {};\n      for (let j = 0; j < races.length; j++) {\n        const race = races[j];\n        if (!race) {\n          continue;\n        }\n        const date = new Date(race.date);\n        const day = date.getDate();\n        const month = date.getMonth();\n        if (!monthDateRecord[month]) {\n          monthDateRecord[month] = {};\n        }\n        if (!monthDateRecord[month][day]) {\n          monthDateRecord[month][day] = [];\n        }\n        let link = 'races/-1';\n        if (race.show) {\n          link = `races/${race.id}`;\n        }\n        monthDateRecord[month][day].push([race.title, link]);\n      }\n      records[year] = monthDateRecord;\n    }\n\n    return records;\n  }\n}\n","export class CreateResultDto {\n  riderId: number;\n  result: number;\n  ageCategoryId: number;\n  acResult: number;\n  raceId: number;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateResultDto } from './create-result.dto';\n\nexport class UpdateResultDto extends PartialType(CreateResultDto) {}\n","import { ResultInterface } from '@tfb/api-interfaces';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Rider } from '../../riders/entities/rider.entity';\nimport { AgeCategory } from '../../age-category/entities/age-category.entity';\nimport { Race } from '../../races/entities/race.entity';\n\n@Entity()\nexport class Result implements ResultInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Rider, (rider) => rider.results)\n  rider: Rider;\n\n  @Column()\n  result: number;\n\n  @ManyToOne(() => AgeCategory, (ageCategory) => ageCategory.results)\n  ageCategory: AgeCategory;\n\n  @Column()\n  acResult: number;\n\n  @ManyToOne(() => Race, (race) => race.results, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  race: Race;\n}\n","import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ResultService } from './result.service';\nimport { CreateResultDto } from './dto/create-result.dto';\nimport { UpdateResultDto } from './dto/update-result.dto';\n\n@Controller('result')\nexport class ResultController {\n  constructor(private readonly resultService: ResultService) {}\n\n  @Post()\n  create(@Body() createResultDto: CreateResultDto) {\n    return this.resultService.create(createResultDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.resultService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.resultService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateResultDto: UpdateResultDto) {\n    return this.resultService.update(+id, updateResultDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.resultService.remove(+id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { ResultService } from './result.service';\nimport { ResultController } from './result.controller';\nimport { RidersService } from '../riders/riders.service';\nimport { Result } from './entities/result.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Rider } from '../riders/entities/rider.entity';\nimport { Country } from '../country/entities/country.entity';\nimport { CountryService } from '../country/country.service';\nimport { AgeCategoryService } from '../age-category/age-category.service';\nimport { Race } from '../races/entities/race.entity';\nimport { AgeCategory } from '../age-category/entities/age-category.entity';\nimport { RacesService } from '../races/races.service';\nimport { RacesModule } from '../races/races.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Result, Rider, Country, Race, AgeCategory]),\n  ],\n  controllers: [ResultController],\n  providers: [\n    ResultService,\n    RidersService,\n    CountryService,\n    AgeCategoryService,\n    RacesService,\n  ],\n})\nexport class ResultModule {}\n","import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AgeCategoryService } from '../age-category/age-category.service';\nimport { Race } from '../races/entities/race.entity';\nimport { RacesService } from '../races/races.service';\nimport { RidersService } from '../riders/riders.service';\nimport { CreateResultDto } from './dto/create-result.dto';\nimport { UpdateResultDto } from './dto/update-result.dto';\nimport { Result } from './entities/result.entity';\n\n@Injectable()\nexport class ResultService {\n  constructor(\n    @InjectRepository(Result)\n    private resultRepository: Repository<Result>,\n    private riderService: RidersService,\n    private ageCategoryService: AgeCategoryService,\n    @Inject(forwardRef(() => RacesService))\n    private raceService: RacesService\n  ) {}\n\n  async create(createResultDto: CreateResultDto) {\n    const race = await this.raceService.findOne(createResultDto.raceId);\n    if (!race) {\n      throw new BadRequestException('Race does not exists');\n    }\n\n    const rider = await this.riderService.findOne(createResultDto.riderId);\n    if (!rider) {\n      throw new BadRequestException('Rider does not exists');\n    }\n\n    const ageCategory = await this.ageCategoryService.findOne(\n      createResultDto.ageCategoryId\n    );\n    if (!ageCategory) {\n      throw new BadRequestException('Age category does not exists');\n    }\n\n    const result = this.resultRepository.create(createResultDto);\n    result.rider = rider;\n    result.race = race;\n    result.ageCategory = ageCategory;\n    return await this.resultRepository.save(result);\n  }\n\n  async findAll() {\n    return await this.resultRepository.find({\n      relations: ['rider', 'ageCategory', 'race'],\n    });\n  }\n\n  async findOne(id: number) {\n    return await this.resultRepository.findOne({\n      where: { id },\n      relations: ['rider', 'ageCategory', 'race'],\n    });\n  }\n\n  async findAllIds(ids: number[]) {\n    const results: Result[] = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const result = await this.findOne(id);\n      if (!result) {\n        continue;\n      }\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  update(id: number, updateResultDto: UpdateResultDto) {\n    return `This action updates a #${id} result`;\n  }\n\n  async remove(id: number) {\n    return await this.resultRepository.delete(id);\n  }\n}\n","import { Country } from '../../country/entities/country.entity';\n\nexport class CreateRiderDto {\n  public name: string;\n  public surname: string;\n  public country: Country;\n  public imgUrl: string;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRiderDto } from './create-rider.dto';\n\nexport class UpdateRiderDto extends PartialType(CreateRiderDto) {}\n","import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { RiderInterface } from '@tfb/api-interfaces';\nimport { Country } from '../../country/entities/country.entity';\nimport { Result } from '../../result/entities/result.entity';\n\n@Entity()\nexport class Rider implements RiderInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  surname: string;\n\n  @ManyToOne(() => Country, (country) => country.riders)\n  country: Country;\n\n  @Column({\n    default: 'profile.jpg',\n  })\n  imgName: string;\n\n  @OneToMany(() => Result, (result) => result.rider)\n  results: Result[];\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Res,\n} from '@nestjs/common';\nimport { RidersService } from './riders.service';\nimport { CreateRiderDto } from './dto/create-rider.dto';\nimport { UpdateRiderDto } from './dto/update-rider.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Express, Response } from 'express';\nimport { diskStorage } from 'multer';\nimport { v4 as uuidv4 } from 'uuid';\nimport path = require('path');\nimport { join } from 'path';\n\nexport const storage = {\n  storage: diskStorage({\n    destination: './upload/riders',\n    filename: (req, file, cb) => {\n      const filename =\n        path.parse(file.originalname).name.replace(/\\s/g, '') + uuidv4();\n      const extension = path.parse(file.originalname).ext;\n\n      cb(null, `${filename}${extension}`);\n    },\n  }),\n};\n@Controller('riders')\nexport class RidersController {\n  constructor(private readonly ridersService: RidersService) {}\n\n  @Post()\n  create(@Body() createRiderDto: CreateRiderDto) {\n    return this.ridersService.create(createRiderDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.ridersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.ridersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateRiderDto: UpdateRiderDto) {\n    return this.ridersService.update(+id, updateRiderDto);\n  }\n\n  @Post('upload/:id')\n  @UseInterceptors(FileInterceptor('file', storage))\n  async uploadProfilePicture(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File\n  ) {\n    await this.ridersService.updateProfilePicture(+id, file.filename);\n    return { imagePath: file.filename };\n  }\n\n  @Delete()\n  deleteProfilePicture(@Param('id') id: string) {\n    return this.ridersService.deleteProfilePicture(+id);\n  }\n\n  @Get('image/:fileName')\n  async findProfileImage(\n    @Param('fileName') fileName: string,\n    @Res() res: Response\n  ) {\n    // const fileName = await this.ridersService.getProfilePictureName(+id);\n    return res.sendFile(join(process.cwd(), 'upload/riders/' + fileName));\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.ridersService.remove(+id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { RidersService } from './riders.service';\nimport { RidersController } from './riders.controller';\nimport { Rider } from './entities/rider.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CountryService } from '../country/country.service';\nimport { Country } from '../country/entities/country.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Rider, Country])],\n  controllers: [RidersController],\n  providers: [RidersService, CountryService],\n})\nexport class RidersModule {}\n","import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateRiderDto } from './dto/create-rider.dto';\nimport { UpdateRiderDto } from './dto/update-rider.dto';\nimport { Rider } from './entities/rider.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CountryService } from '../country/country.service';\nimport * as fs from 'fs';\n\n@Injectable()\nexport class RidersService {\n  constructor(\n    @InjectRepository(Rider)\n    private ridersRepository: Repository<Rider>,\n    private countryService: CountryService\n  ) {}\n\n  async create(createRiderDto: CreateRiderDto) {\n    const rider = this.ridersRepository.create(createRiderDto);\n    await this.ridersRepository.save(rider);\n    return rider;\n  }\n\n  async findAll() {\n    const riders = await this.ridersRepository.find({ relations: ['country'] });\n    riders.sort((a, b) => {\n      return a.id - b.id;\n    });\n    return riders;\n  }\n\n  async findOne(id: number) {\n    if (!id) {\n      throw new InternalServerErrorException('ID is undefined');\n    }\n\n    const rider = await this.ridersRepository.find({\n      where: { id: id },\n      relations: ['country'],\n    });\n\n    if (rider.length === 0) {\n      return;\n    }\n    return rider[0];\n  }\n\n  async update(id: number, updateRiderDto: UpdateRiderDto) {\n    const rider = await this.ridersRepository.findOneBy({ id });\n    if (!rider) {\n      return;\n    }\n    const country = updateRiderDto.country;\n    if (country) {\n      const countryEntity = await this.countryService.findOne(country.id);\n      if (!countryEntity) {\n        return;\n      }\n      rider.country = countryEntity;\n    }\n    const newRider = { ...rider, ...updateRiderDto };\n    return await this.ridersRepository.update(id, newRider);\n  }\n\n  async remove(id: number) {\n    const rider = await this.ridersRepository.findOneBy({ id });\n    if (!rider) {\n      return;\n    }\n    // delete old picture from disk\n    this.deleteProfileImage(rider);\n\n    return await this.ridersRepository.delete(id);\n  }\n\n  async updateProfilePicture(id: number, filename: string) {\n    const rider = await this.ridersRepository.findOneBy({ id });\n    if (!rider) {\n      return;\n    }\n    // delete old picture from disk\n    this.deleteProfileImage(rider);\n\n    // updating new filename\n    return await this.ridersRepository.update(id, { imgName: filename });\n  }\n\n  async deleteProfilePicture(id: number) {\n    const rider = await this.ridersRepository.findOneBy({ id });\n    if (!rider) {\n      return;\n    }\n    return await this.ridersRepository.update(id, {\n      imgName: 'profile.jpg',\n    });\n  }\n\n  async getProfilePictureName(id: number) {\n    const rider = await this.ridersRepository.findOneBy({ id });\n    if (!rider) {\n      return;\n    }\n    return rider.imgName;\n  }\n\n  private deleteProfileImage(rider: Rider) {\n    // Do not delete default image\n    if (rider.imgName === 'profile.jpg') {\n      return;\n    }\n\n    const path = './upload/riders';\n    fs.unlink(`${path}/${rider.imgName}`, (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n}\n","import { Country } from '../../country/entities/country.entity';\n\nexport class CreateStoryDto {\n  title: string;\n  place: string;\n  country: Country;\n  date: Date;\n  text: string;\n  imgNames: string[];\n  podium: boolean;\n  show: boolean;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateStoryDto } from './create-story.dto';\n\nexport class UpdateStoryDto extends PartialType(CreateStoryDto) {}\n","import { StoryInterface } from '@tfb/api-interfaces';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Country } from '../../country/entities/country.entity';\n\n@Entity()\nexport class Story implements StoryInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  place: string;\n\n  @ManyToOne(() => Country, (country) => country.stories)\n  country: Country;\n\n  @Column({ type: 'date' })\n  date: Date;\n\n  @Column()\n  text: string;\n\n  @Column('simple-array', {\n    nullable: true,\n  })\n  imgNames: string[];\n\n  @Column({ default: false })\n  podium: boolean;\n\n  @Column({ default: false })\n  show: boolean;\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Res,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { StoriesService } from './stories.service';\nimport { CreateStoryDto } from './dto/create-story.dto';\nimport { UpdateStoryDto } from './dto/update-story.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Express, Response } from 'express';\nimport { diskStorage } from 'multer';\nimport { v4 as uuidv4 } from 'uuid';\nimport path = require('path');\nimport { join } from 'path';\n\nexport const storage = {\n  storage: diskStorage({\n    destination: './upload/stories',\n    filename: (req, file, cb) => {\n      const filename =\n        path.parse(file.originalname).name.replace(/\\s/g, '') + uuidv4();\n      const extension = path.parse(file.originalname).ext;\n\n      cb(null, `${filename}${extension}`);\n    },\n  }),\n};\n\n@Controller('story')\nexport class StoriesController {\n  constructor(private readonly storiesService: StoriesService) {}\n\n  @Post()\n  create(@Body() createStoryDto: CreateStoryDto) {\n    return this.storiesService.create(createStoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.storiesService.findAllChecked();\n  }\n\n  @Get('all')\n  findAllShow() {\n    return this.storiesService.findAll();\n  }\n\n  @Get('map')\n  getMap() {\n    return this.storiesService.getMap();\n  }\n\n  @Get('years')\n  getYears() {\n    return this.storiesService.getYears();\n  }\n\n  @Get('calendar')\n  getCalendar() {\n    return this.storiesService.getCalendar();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.storiesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateStoryDto: UpdateStoryDto) {\n    return this.storiesService.update(+id, updateStoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.storiesService.remove(+id);\n  }\n\n  @Post('upload/:id')\n  @UseInterceptors(FileInterceptor('file', storage))\n  async uploadProfilePicture(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File\n  ) {\n    await this.storiesService.addPicture(+id, file.filename);\n    return { imagePath: file.filename };\n  }\n\n  @Get('image/:fileName')\n  async findProfileImage(\n    @Param('fileName') fileName: string,\n    @Res() res: Response\n  ) {\n    return res.sendFile(join(process.cwd(), 'upload/stories/' + fileName));\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { StoriesService } from './stories.service';\nimport { StoriesController } from './stories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CountryService } from '../country/country.service';\nimport { Story } from './entities/story.entity';\nimport { Country } from '../country/entities/country.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Story, Country])],\n  controllers: [StoriesController],\n  providers: [StoriesService, CountryService],\n})\nexport class StoriesModule {}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StoryInterface } from '@tfb/api-interfaces';\nimport { Repository } from 'typeorm';\nimport { CountryService } from '../country/country.service';\nimport { CreateStoryDto } from './dto/create-story.dto';\nimport { UpdateStoryDto } from './dto/update-story.dto';\nimport { Story } from './entities/story.entity';\nimport * as fs from 'fs';\n\n@Injectable()\nexport class StoriesService {\n  constructor(\n    @InjectRepository(Story)\n    private storiesRepository: Repository<Story>,\n    private countryService: CountryService\n  ) {}\n\n  async create(createStoryDto: CreateStoryDto) {\n    const story = this.storiesRepository.create(createStoryDto);\n    if (!story.imgNames) {\n      story.imgNames = [];\n    }\n    return await this.storiesRepository.save(story);\n  }\n\n  async findAll() {\n    return await this.storiesRepository.find({ relations: ['country'] });\n  }\n\n  async findAllChecked() {\n    return await this.storiesRepository.find({\n      where: { show: true },\n      relations: ['country'],\n    });\n  }\n\n  async findOne(id: number) {\n    const story = await this.storiesRepository.findOne({\n      where: { id },\n      relations: ['country'],\n    });\n    if (!story) {\n      return new NotFoundException();\n    }\n    return story;\n  }\n\n  async update(id: number, updateStoryDto: UpdateStoryDto) {\n    const story = await this.storiesRepository.findOneBy({ id });\n    if (!story) {\n      return;\n    }\n\n    const country = updateStoryDto.country;\n\n    if (country) {\n      const countryEntity = await this.countryService.findOne(country.id);\n      if (!countryEntity) {\n        return;\n      }\n      story.country = countryEntity;\n    }\n\n    // Remove deleted images\n    if (updateStoryDto.imgNames) {\n      const diff = story.imgNames.filter((item) => {\n        if (updateStoryDto.imgNames) {\n          return updateStoryDto.imgNames.indexOf(item) < 0;\n        }\n      });\n      this.deletePictures(diff);\n    }\n\n    const newStory = { ...story, ...updateStoryDto };\n    await this.storiesRepository.update(id, newStory);\n    return newStory;\n  }\n\n  async remove(id: number) {\n    const story = await this.storiesRepository.findOneBy({ id });\n    if (!story) {\n      return;\n    }\n    this.deletePictures(story.imgNames);\n    return await this.storiesRepository.delete({ id });\n  }\n\n  async addPicture(id: number, filename: string) {\n    const story = await this.storiesRepository.findOneBy({ id });\n    if (!story) {\n      return;\n    }\n\n    // Adding new image to array\n    let images = story.imgNames;\n    if (!images) {\n      images = [];\n    }\n    images.push(filename);\n    return await this.storiesRepository.update(id, { imgNames: images });\n  }\n\n  async deletePictures(filenames: string[]) {\n    filenames.forEach((filename) => {\n      this.deletePicture(filename);\n    });\n  }\n\n  async deletePicture(filename: string) {\n    const path = './upload/stories';\n    fs.unlink(`${path}/${filename}`, (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  async getMap() {\n    const stories = await this.findAllChecked();\n\n    const map: Record<number, StoryInterface[]> = {};\n    for (const story of stories) {\n      const year = new Date(story.date).getFullYear();\n      if (!map[year]) {\n        map[year] = [];\n      }\n      map[year].push(story);\n    }\n    return map;\n  }\n\n  async getMapAll() {\n    const stories = await this.findAll();\n\n    const map: Record<number, StoryInterface[]> = {};\n    for (const story of stories) {\n      const year = new Date(story.date).getFullYear();\n      if (!map[year]) {\n        map[year] = [];\n      }\n      map[year].push(story);\n    }\n    return map;\n  }\n\n  async getYears() {\n    const map = await this.getMap();\n    return Object.keys(map);\n  }\n\n  async getCalendar() {\n    const records: Record<\n      number,\n      Record<number, Record<number, string[][]>>\n    > = {};\n    const map = await this.getMapAll();\n    const years = Object.keys(map);\n\n    for (let i = 0; i < years.length; i++) {\n      const year = years[i];\n      const stories: StoryInterface[] = map[year];\n      const monthDateRecord: Record<number, Record<number, string[][]>> = {};\n      for (let j = 0; j < stories.length; j++) {\n        const story = stories[j];\n        if (!story) {\n          continue;\n        }\n        const date = new Date(story.date);\n        const day = date.getDate();\n        const month = date.getMonth();\n        if (!monthDateRecord[month]) {\n          monthDateRecord[month] = {};\n        }\n        if (!monthDateRecord[month][day]) {\n          monthDateRecord[month][day] = [];\n        }\n\n        let link = 'stories/-1';\n        if (story.show) {\n          link = `stories/${story.id}`;\n        }\n        monthDateRecord[month][day].push([story.title, link]);\n      }\n      records[year] = monthDateRecord;\n    }\n\n    return records;\n  }\n}\n","import {\n  Column,\n  Entity,\n  PrimaryColumn,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\nimport { Exclude, Expose } from 'class-transformer';\nimport { UserInterface } from '@tfb/api-interfaces';\n\n/**\n * User class representing a user entity.\n */\n@Entity()\n@Unique(['email'])\nexport class User implements UserInterface {\n  /**\n   * Generated primary key.\n   * @type {number}\n   */\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  /**\n   * Email is a primary key and needs to be unique.\n   * @type {string}\n   */\n  @PrimaryColumn()\n  @Expose()\n  public email: string;\n\n  /**\n   * name.\n   * @type {string}\n   */\n  @Column()\n  @Expose()\n  public name: string;\n\n  /**\n   * Hashed user password. Should not be exposed. See:\n   * [Expose properties]{@link https://docs.nestjs.com/techniques/serialization#expose-properties}\n   * @type {string}\n   */\n  @Column()\n  public password: string;\n\n  /**\n   * Entity status.\n   * @type {boolean}\n   */\n  @Column({ default: false })\n  public isActive: boolean;\n\n  /**\n   * Current refresh token. Needs to be deleted on logout or password change.\n   *\n   * ToDo: Temporary solution. Hashed Token needs to be stored in an in memory\n   * database. See: [redis]{@link https://redis.io/}.\n   * @type {string}\n   */\n  @Column({\n    nullable: true,\n  })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n}\n","import {\n  Controller,\n  Get,\n  Param,\n  Request,\n  SerializeOptions,\n  UseGuards,\n} from '@nestjs/common';\nimport { RequestWithUser } from '@tfb/api-interfaces';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n/**\n * UsersController is responsible for handling incoming user requests\n * and returning responses to the client. Only exposed properties will be send.\n * See [Expose properties]{@link https://docs.nestjs.com/techniques/serialization#expose-properties}\n */\n@Controller('user')\n@SerializeOptions({\n  strategy: 'excludeAll',\n})\nexport class UserController {\n  /**\n   * Inject needed provider.\n   * @param {UsersService} usersService\n   */\n  constructor(private usersService: UserService) {}\n\n  /**\n   * Return the user belonging to the given jwt.\n   * @param {RequestWithUser} req\n   * @returns {UserInterface}\n   */\n  @Get('profile')\n  @UseGuards(JwtAuthGuard)\n  getProfile(@Request() req: RequestWithUser): Promise<User> {\n    return this.usersService.getById(req.user.id);\n  }\n\n  /**\n   * Return the user belonging to the given id.\n   * @param {number} id\n   * @returns {UserInterface}\n   */\n  @Get('profile/:id')\n  @UseGuards(JwtAuthGuard)\n  getProfileById(@Param('id') id: number): Promise<User> {\n    return this.usersService.getById(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UserService],\n  exports: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n/**\n * UsersService is responsible for interacting with the user database.\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Inject needed provider.\n   * @param {Repository<UserInterface>} usersRepository\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository<User>\n  ) {}\n\n  /**\n   * Find user with the given email.\n   * @param {string} email\n   * @returns {Promise<UserInterface>}\n   */\n  async getByEmail(email: string): Promise<User | null> {\n    const user = await this.usersRepository.findOne({ where: { email } });\n    return user;\n  }\n\n  /**\n   * Find user with the given id.\n   * @param {number} id\n   * @returns {Promise<UserInterface>}\n   */\n  async getById(id: number): Promise<User> {\n    return await this.usersRepository.findOne({ where: { id } });\n  }\n\n  /**\n   * Create a user with the given properties.\n   * @param {CreateUserDto} userData\n   * @returns {Promise<UserInterface>}\n   */\n  async create(userData: CreateUserDto): Promise<User> {\n    const newUser = this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  /**\n   * Save the given refresh token in the database\n   * @param {string} refreshToken\n   * @param {number} userId\n   */\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(\n      { id: userId },\n      {\n        currentHashedRefreshToken,\n      }\n    );\n  }\n\n  /**\n   * Remove the given user's refresh token.\n   * @param {number} userId\n   * @returns {Promise<UpdateResult>}\n   */\n  async removeRefreshToken(userId: number): Promise<UpdateResult> {\n    return this.usersRepository.update(\n      { id: userId },\n      {\n        currentHashedRefreshToken: null,\n      }\n    );\n  }\n\n  /**\n   * Verify whether the saved refresh token of the user with the given id\n   * matches the given refresh token.\n   * @param {string} refreshToken\n   * @param {number} userId\n   * @returns {Promise<User>}\n   */\n  async getUserIfRefreshTokenMatches(\n    refreshToken: string,\n    userId: number\n  ): Promise<User> {\n    const user = await this.getById(userId);\n    if (!user) {\n      throw new HttpException(\n        `User with id ${userId} does not exists`,\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"express\");","module.exports = require(\"multer\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport {\n  ClassSerializerInterceptor,\n  Logger,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { NestFactory, Reflector } from '@nestjs/core';\nimport cookieParser = require('cookie-parser');\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment.prod';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  if (environment.production) {\n    app.enableCors();\n  }\n\n  app.useGlobalPipes(new ValidationPipe());\n  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));\n  app.use(cookieParser());\n\n  const globalPrefix = 'tfb';\n  app.setGlobalPrefix(globalPrefix);\n\n  const configService = app.get(ConfigService);\n  const port = configService.get('PORT') || 3333;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}